{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nexport default {\n  name: \"AppSnake\",\n  data() {\n    return {\n      canvas: null,\n      ctx: null,\n      gridSize: 20,\n      snake: [],\n      food: null,\n      direction: \"right\",\n      gameInterval: null\n    };\n  },\n  mounted() {\n    this.canvas = this.$refs.gameCanvas;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.canvas.width = 400;\n    this.canvas.height = 400;\n    this.initializeGame();\n    document.addEventListener(\"keydown\", this.handleArrowKeys);\n  },\n  methods: {\n    initializeGame() {\n      this.snake = [{\n        x: 3,\n        y: 2\n      }, {\n        x: 2,\n        y: 2\n      }, {\n        x: 1,\n        y: 2\n      }];\n      this.spawnFood();\n      if (this.gameInterval) clearInterval(this.gameInterval);\n      this.gameInterval = setInterval(this.updateGame, 150);\n    },\n    spawnFood() {\n      let foodPosition;\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        foodPosition = {\n          x: Math.floor(Math.random() * (this.canvas.width / this.gridSize)),\n          y: Math.floor(Math.random() * (this.canvas.height / this.gridSize))\n        };\n        if (!this.snake.some(s => s.x === foodPosition.x && s.y === foodPosition.y)) break;\n      }\n      this.food = foodPosition;\n    },\n    updateGame() {\n      const head = {\n        ...this.snake[0]\n      };\n      switch (this.direction) {\n        case \"right\":\n          head.x++;\n          break;\n        case \"left\":\n          head.x--;\n          break;\n        case \"up\":\n          head.y--;\n          break;\n        case \"down\":\n          head.y++;\n          break;\n      }\n      if (this.isCollision(head)) {\n        clearInterval(this.gameInterval);\n        alert('Game Over!');\n        this.initializeGame();\n        return;\n      }\n      this.snake.unshift(head);\n      if (head.x === this.food.x && head.y === this.food.y) {\n        this.spawnFood();\n      } else {\n        this.snake.pop();\n      }\n      this.drawGame();\n    },\n    isCollision(pos) {\n      if (pos.x < 0 || pos.x >= this.canvas.width / this.gridSize || pos.y < 0 || pos.y >= this.canvas.height / this.gridSize || this.snake.some(s => s.x === pos.x && s.y === pos.y)) {\n        return true;\n      }\n      return false;\n    },\n    drawGame() {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // Draw snake\n      for (let cell of this.snake) {\n        this.ctx.fillStyle = \"green\";\n        this.ctx.fillRect(cell.x * this.gridSize, cell.y * this.gridSize, this.gridSize, this.gridSize);\n      }\n\n      // Draw food\n      this.ctx.fillStyle = \"red\";\n      this.ctx.fillRect(this.food.x * this.gridSize, this.food.y * this.gridSize, this.gridSize, this.gridSize);\n    },\n    handleArrowKeys(e) {\n      switch (e.key) {\n        case \"ArrowUp\":\n          if (this.direction !== 'down') this.direction = \"up\";\n          break;\n        case \"ArrowDown\":\n          if (this.direction !== 'up') this.direction = \"down\";\n          break;\n        case \"ArrowLeft\":\n          if (this.direction !== 'right') this.direction = \"left\";\n          break;\n        case \"ArrowRight\":\n          if (this.direction !== 'left') this.direction = \"right\";\n          break;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","canvas","ctx","gridSize","snake","food","direction","gameInterval","mounted","$refs","gameCanvas","getContext","width","height","initializeGame","document","addEventListener","handleArrowKeys","methods","x","y","spawnFood","clearInterval","setInterval","updateGame","foodPosition","Math","floor","random","some","s","head","isCollision","alert","unshift","pop","drawGame","pos","clearRect","cell","fillStyle","fillRect","e","key"],"sources":["C:\\Users\\doria\\Desktop\\MY WORKSPACE\\DJANGO APPS\\game_platform\\frontend\\src\\views\\AppSnake.vue"],"sourcesContent":["<template>\r\n    <div class=\"game-wrapper\">\r\n      <canvas ref=\"gameCanvas\"></canvas>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: \"AppSnake\",\r\n    data() {\r\n      return {\r\n        canvas: null,\r\n        ctx: null,\r\n        gridSize: 20,\r\n        snake: [],\r\n        food: null,\r\n        direction: \"right\",\r\n        gameInterval: null\r\n      };\r\n    },\r\n    mounted() {\r\n      this.canvas = this.$refs.gameCanvas;\r\n      this.ctx = this.canvas.getContext(\"2d\");\r\n      this.canvas.width = 400;\r\n      this.canvas.height = 400;\r\n  \r\n      this.initializeGame();\r\n      document.addEventListener(\"keydown\", this.handleArrowKeys);\r\n    },\r\n    methods: {\r\n      initializeGame() {\r\n        this.snake = [\r\n          { x: 3, y: 2 },\r\n          { x: 2, y: 2 },\r\n          { x: 1, y: 2 }\r\n        ];\r\n        this.spawnFood();\r\n        if (this.gameInterval) clearInterval(this.gameInterval);\r\n        this.gameInterval = setInterval(this.updateGame, 150);\r\n      },\r\n      spawnFood() {\r\n    let foodPosition;\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      foodPosition = {\r\n        x: Math.floor(Math.random() * (this.canvas.width / this.gridSize)),\r\n        y: Math.floor(Math.random() * (this.canvas.height / this.gridSize))\r\n      };\r\n      if (!this.snake.some(s => s.x === foodPosition.x && s.y === foodPosition.y)) break;\r\n    }\r\n    this.food = foodPosition;\r\n},\r\n\r\n      updateGame() {\r\n        const head = { ...this.snake[0] };\r\n  \r\n        switch (this.direction) {\r\n          case \"right\": head.x++; break;\r\n          case \"left\": head.x--; break;\r\n          case \"up\": head.y--; break;\r\n          case \"down\": head.y++; break;\r\n        }\r\n  \r\n        if (this.isCollision(head)) {\r\n          clearInterval(this.gameInterval);\r\n          alert('Game Over!');\r\n          this.initializeGame();\r\n          return;\r\n        }\r\n  \r\n        this.snake.unshift(head);\r\n  \r\n        if (head.x === this.food.x && head.y === this.food.y) {\r\n          this.spawnFood();\r\n        } else {\r\n          this.snake.pop();\r\n        }\r\n  \r\n        this.drawGame();\r\n      },\r\n      isCollision(pos) {\r\n        if (pos.x < 0 || pos.x >= this.canvas.width / this.gridSize ||\r\n            pos.y < 0 || pos.y >= this.canvas.height / this.gridSize ||\r\n            this.snake.some(s => s.x === pos.x && s.y === pos.y)) {\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      drawGame() {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  \r\n        // Draw snake\r\n        for (let cell of this.snake) {\r\n          this.ctx.fillStyle = \"green\";\r\n          this.ctx.fillRect(cell.x * this.gridSize, cell.y * this.gridSize, this.gridSize, this.gridSize);\r\n        }\r\n  \r\n        // Draw food\r\n        this.ctx.fillStyle = \"red\";\r\n        this.ctx.fillRect(this.food.x * this.gridSize, this.food.y * this.gridSize, this.gridSize, this.gridSize);\r\n      },\r\n      handleArrowKeys(e) {\r\n        switch (e.key) {\r\n          case \"ArrowUp\": if (this.direction !== 'down') this.direction = \"up\"; break;\r\n          case \"ArrowDown\": if (this.direction !== 'up') this.direction = \"down\"; break;\r\n          case \"ArrowLeft\": if (this.direction !== 'right') this.direction = \"left\"; break;\r\n          case \"ArrowRight\": if (this.direction !== 'left') this.direction = \"right\"; break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .game-wrapper {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh;\r\n    background-color: #f4f4f4;\r\n  }\r\n  </style>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}