{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      board: Array(9).fill(null),\n      currentPlayer: 'player',\n      winner: null\n    };\n  },\n  computed: {\n    winnerMessage() {\n      if (this.winner === 'player') return 'You Win!';\n      if (this.winner === 'computer') return 'You Lost!';\n      return '';\n    }\n  },\n  created() {\n    if (Math.random() < 0.5) {\n      this.currentPlayer = 'computer';\n      this.computerMove();\n    }\n  },\n  methods: {\n    makeMove(index) {\n      if (this.board[index] || this.winner) return;\n      this.board[index] = this.currentPlayer === 'player' ? 'X' : 'O';\n      if (this.checkWinner()) {\n        this.winner = this.currentPlayer;\n        return;\n      }\n      this.switchPlayer();\n      if (this.currentPlayer === 'computer') {\n        this.computerMove();\n      }\n    },\n    checkWinner() {\n      const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n      for (const combo of winningCombos) {\n        if (this.board[combo[0]] && this.board[combo[0]] === this.board[combo[1]] && this.board[combo[0]] === this.board[combo[2]]) {\n          return true;\n        }\n      }\n      return false;\n    },\n    switchPlayer() {\n      this.currentPlayer = this.currentPlayer === 'player' ? 'computer' : 'player';\n    },\n    computerMove() {\n      // Here, for simplicity, computer picks a random empty cell\n      const emptyCells = this.board.reduce((acc, val, idx) => val ? acc : [...acc, idx], []);\n      const move = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      this.makeMove(move);\n    },\n    resetGame() {\n      this.board = Array(9).fill(null);\n      this.winner = null;\n      if (Math.random() < 0.5) {\n        this.currentPlayer = 'computer';\n        this.computerMove();\n      } else {\n        this.currentPlayer = 'player';\n      }\n    },\n    goHome() {\n      this.$router.push('/');\n    }\n  }\n};","map":{"version":3,"names":["data","board","Array","fill","currentPlayer","winner","computed","winnerMessage","created","Math","random","computerMove","methods","makeMove","index","checkWinner","switchPlayer","winningCombos","combo","emptyCells","reduce","acc","val","idx","move","floor","length","resetGame","goHome","$router","push"],"sources":["C:\\Users\\doria\\Desktop\\MY WORKSPACE\\DJANGO APPS\\game_platform\\frontend\\src\\views\\TikTakToe.vue"],"sourcesContent":["<template>\r\n    <div class=\"game-wrapper\">\r\n      <div class=\"board\">\r\n        <div \r\n          v-for=\"(cell, index) in board\" \r\n          :key=\"index\" \r\n          :class=\"['cell', cell]\"\r\n          @click=\"makeMove(index)\">\r\n        </div>\r\n      </div>\r\n      <div v-if=\"winner\" :class=\"{ 'win': winner === 'player', 'lose': winner === 'computer' }\">\r\n        {{ winnerMessage }}\r\n      </div>\r\n      <div v-if=\"winner\">\r\n        <button @click=\"resetGame\">Play Again?</button>\r\n        <button @click=\"goHome\">Go Home</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        board: Array(9).fill(null), \r\n        currentPlayer: 'player', \r\n        winner: null\r\n      };\r\n    },\r\n    computed: {\r\n      winnerMessage() {\r\n        if (this.winner === 'player') return 'You Win!';\r\n        if (this.winner === 'computer') return 'You Lost!';\r\n        return '';\r\n      }\r\n    },\r\n    created() {\r\n      if (Math.random() < 0.5) { \r\n        this.currentPlayer = 'computer';\r\n        this.computerMove();\r\n      }\r\n    },\r\n    methods: {\r\n      makeMove(index) {\r\n        if (this.board[index] || this.winner) return;\r\n        \r\n        this.board[index] = this.currentPlayer === 'player' ? 'X' : 'O';\r\n        \r\n        if (this.checkWinner()) {\r\n          this.winner = this.currentPlayer;\r\n          return;\r\n        }\r\n        \r\n        this.switchPlayer();\r\n        if (this.currentPlayer === 'computer') {\r\n          this.computerMove();\r\n        }\r\n      },\r\n      checkWinner() {\r\n        const winningCombos = [\r\n          [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n          [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n          [0, 4, 8], [2, 4, 6]\r\n        ];\r\n        for (const combo of winningCombos) {\r\n          if (this.board[combo[0]] && this.board[combo[0]] === this.board[combo[1]] && this.board[combo[0]] === this.board[combo[2]]) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n      switchPlayer() {\r\n        this.currentPlayer = this.currentPlayer === 'player' ? 'computer' : 'player';\r\n      },\r\n      computerMove() {\r\n        // Here, for simplicity, computer picks a random empty cell\r\n        const emptyCells = this.board.reduce((acc, val, idx) => val ? acc : [...acc, idx], []);\r\n        const move = emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n        this.makeMove(move);\r\n      },\r\n      resetGame() {\r\n        this.board = Array(9).fill(null);\r\n        this.winner = null;\r\n        if (Math.random() < 0.5) {\r\n          this.currentPlayer = 'computer';\r\n          this.computerMove();\r\n        } else {\r\n          this.currentPlayer = 'player';\r\n        }\r\n      },\r\n      goHome() {\r\n        this.$router.push('/');\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* For simplicity, only the basics are styled here. You can extend these styles to make it more modern. */\r\n  .game-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    font-family: Arial, sans-serif;\r\n  }\r\n  \r\n  .board {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 60px);\r\n    gap: 5px;\r\n  }\r\n  \r\n  .cell {\r\n    width: 60px;\r\n    height: 60px;\r\n    border: 1px solid #000;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .cell.X::before {\r\n    content: \"X\";\r\n  }\r\n  \r\n  .cell.O::before {\r\n    content: \"O\";\r\n  }\r\n  \r\n  .win {\r\n    color: green;\r\n  }\r\n  \r\n  .lose {\r\n    color: red;\r\n  }\r\n  \r\n  button {\r\n    margin-top: 20px;\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n  }\r\n  </style>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}