{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b9ea5190\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"game-wrapper\"\n};\nconst _hoisted_2 = {\n  class: \"board\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.board, (cell, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['cell', cell]),\n      onClick: $event => $options.makeMove(index)\n    }, null, 10 /* CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.winner ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass({\n      'win': $data.winner === 'player',\n      'lose': $data.winner === 'computer'\n    })\n  }, _toDisplayString($options.winnerMessage), 3 /* TEXT, CLASS */)) : _createCommentVNode(\"v-if\", true), $data.winner ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.resetGame && $options.resetGame(...args))\n  }, \"Play Again?\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.goHome && $options.goHome(...args))\n  }, \"Go Home\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","board","cell","index","key","_normalizeClass","onClick","$event","$options","makeMove","winner","winnerMessage","_hoisted_4","_cache","args","resetGame","goHome"],"sources":["C:\\Users\\doria\\Desktop\\MY WORKSPACE\\DJANGO APPS\\game_platform\\frontend\\src\\views\\TikTakToe.vue"],"sourcesContent":["<template>\r\n    <div class=\"game-wrapper\">\r\n      <div class=\"board\">\r\n        <div \r\n          v-for=\"(cell, index) in board\" \r\n          :key=\"index\" \r\n          :class=\"['cell', cell]\"\r\n          @click=\"makeMove(index)\">\r\n        </div>\r\n      </div>\r\n      <div v-if=\"winner\" :class=\"{ 'win': winner === 'player', 'lose': winner === 'computer' }\">\r\n        {{ winnerMessage }}\r\n      </div>\r\n      <div v-if=\"winner\">\r\n        <button @click=\"resetGame\">Play Again?</button>\r\n        <button @click=\"goHome\">Go Home</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        board: Array(9).fill(null), \r\n        currentPlayer: 'player', \r\n        winner: null\r\n      };\r\n    },\r\n    computed: {\r\n      winnerMessage() {\r\n        if (this.winner === 'player') return 'You Win!';\r\n        if (this.winner === 'computer') return 'You Lost!';\r\n        return '';\r\n      }\r\n    },\r\n    created() {\r\n      if (Math.random() < 0.5) { \r\n        this.currentPlayer = 'computer';\r\n        this.computerMove();\r\n      }\r\n    },\r\n    methods: {\r\n      makeMove(index) {\r\n        if (this.board[index] || this.winner) return;\r\n        \r\n        this.board[index] = this.currentPlayer === 'player' ? 'X' : 'O';\r\n        \r\n        if (this.checkWinner()) {\r\n          this.winner = this.currentPlayer;\r\n          return;\r\n        }\r\n        \r\n        this.switchPlayer();\r\n        if (this.currentPlayer === 'computer') {\r\n          this.computerMove();\r\n        }\r\n      },\r\n      checkWinner() {\r\n        const winningCombos = [\r\n          [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n          [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n          [0, 4, 8], [2, 4, 6]\r\n        ];\r\n        for (const combo of winningCombos) {\r\n          if (this.board[combo[0]] && this.board[combo[0]] === this.board[combo[1]] && this.board[combo[0]] === this.board[combo[2]]) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n      switchPlayer() {\r\n        this.currentPlayer = this.currentPlayer === 'player' ? 'computer' : 'player';\r\n      },\r\n      computerMove() {\r\n        // Here, for simplicity, computer picks a random empty cell\r\n        const emptyCells = this.board.reduce((acc, val, idx) => val ? acc : [...acc, idx], []);\r\n        const move = emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n        this.makeMove(move);\r\n      },\r\n      resetGame() {\r\n        this.board = Array(9).fill(null);\r\n        this.winner = null;\r\n        if (Math.random() < 0.5) {\r\n          this.currentPlayer = 'computer';\r\n          this.computerMove();\r\n        } else {\r\n          this.currentPlayer = 'player';\r\n        }\r\n      },\r\n      goHome() {\r\n        this.$router.push('/');\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* For simplicity, only the basics are styled here. You can extend these styles to make it more modern. */\r\n  .game-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    font-family: Arial, sans-serif;\r\n  }\r\n  \r\n  .board {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 60px);\r\n    gap: 5px;\r\n  }\r\n  \r\n  .cell {\r\n    width: 60px;\r\n    height: 60px;\r\n    border: 1px solid #000;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .cell.X::before {\r\n    content: \"X\";\r\n  }\r\n  \r\n  .cell.O::before {\r\n    content: \"O\";\r\n  }\r\n  \r\n  .win {\r\n    color: green;\r\n  }\r\n  \r\n  .lose {\r\n    color: red;\r\n  }\r\n  \r\n  button {\r\n    margin-top: 20px;\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n  }\r\n  </style>\r\n  "],"mappings":";;;EACSA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAO;;;;;;uBADpBC,mBAAA,CAgBM,OAhBNC,UAgBM,GAfJC,mBAAA,CAOM,OAPNC,UAOM,I,kBANJH,mBAAA,CAKMI,SAAA,QAAAC,WAAA,CAJoBC,KAAA,CAAAC,KAAK,GAArBC,IAAI,EAAEC,KAAK;yBADrBT,mBAAA,CAKM;MAHHU,GAAG,EAAED,KAAK;MACVV,KAAK,EAAAY,eAAA,UAAWH,IAAI;MACpBI,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,QAAQ,CAACN,KAAK;;oCAGfH,KAAA,CAAAU,MAAM,I,cAAjBhB,mBAAA,CAEM;;IAFcD,KAAK,EAAAY,eAAA;MAAA,OAAWL,KAAA,CAAAU,MAAM;MAAA,QAAuBV,KAAA,CAAAU,MAAM;IAAA;sBAClEF,QAAA,CAAAG,aAAa,2B,mCAEPX,KAAA,CAAAU,MAAM,I,cAAjBhB,mBAAA,CAGM,OAAAkB,UAAA,GAFJhB,mBAAA,CAA+C;IAAtCU,OAAK,EAAAO,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEN,QAAA,CAAAO,SAAA,IAAAP,QAAA,CAAAO,SAAA,IAAAD,IAAA,CAAS;KAAE,aAAW,GACtClB,mBAAA,CAAwC;IAA/BU,OAAK,EAAAO,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEN,QAAA,CAAAQ,MAAA,IAAAR,QAAA,CAAAQ,MAAA,IAAAF,IAAA,CAAM;KAAE,SAAO,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}